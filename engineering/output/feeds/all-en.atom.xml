<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ulule</title><link href="/" rel="alternate"></link><link href="None/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2017-04-13T00:00:00+02:00</updated><entry><title>Introducing deepcopier, a Go library to make copying of structs a bit easier</title><link href="/introducing-deepcopier-a-go-library-to-make-copying-of-structs-a-bit-easier.html" rel="alternate"></link><published>2017-04-13T00:00:00+02:00</published><updated>2017-04-13T00:00:00+02:00</updated><author><name>Florent Messa</name></author><id>tag:None,2017-04-13:/introducing-deepcopier-a-go-library-to-make-copying-of-structs-a-bit-easier.html</id><summary type="html">&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;We are currently refactoring our &lt;a class="reference external" href="http://developers.ulule.com/"&gt;API&lt;/a&gt; at Ulule from our monolithic Python
stack with &lt;a class="reference external" href="https://github.com/django-tastypie/django-tastypie"&gt;django-tastypie&lt;/a&gt; to a separate Go &lt;a class="reference external" href="http://martinfowler.com/articles/microservices.html"&gt;microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When working with models in Go, you don't want to expose all columns and
also implement more methods without writing a lot of code, because everyone
knows programmers are â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;We are currently refactoring our &lt;a class="reference external" href="http://developers.ulule.com/"&gt;API&lt;/a&gt; at Ulule from our monolithic Python
stack with &lt;a class="reference external" href="https://github.com/django-tastypie/django-tastypie"&gt;django-tastypie&lt;/a&gt; to a separate Go &lt;a class="reference external" href="http://martinfowler.com/articles/microservices.html"&gt;microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When working with models in Go, you don't want to expose all columns and
also implement more methods without writing a lot of code, because everyone
knows programmers are lazy ;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ulule/deepcopier"&gt;deepcopier&lt;/a&gt; will help you in your daily job when you want to copy a struct into
another one (think resource) or from another one (think payload).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Assuming you are already a Go developer, you have your environment up and ready,
so run this command in your shell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go get github.com/ulule/deepcopier
&lt;/pre&gt;
&lt;p&gt;You are now ready to use this library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To demonstrate why you should use this library, we will build a dead simple REST
API in READ only.&lt;/p&gt;
&lt;p&gt;We will use &lt;a class="reference external" href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt; as database so I'm also assuming you
already have &lt;a class="reference external" href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt; installed on your laptop :)&lt;/p&gt;
&lt;p&gt;Let's create the databass!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ psql postgres
psql (9.4.1)
Type &amp;quot;help&amp;quot; for help.

postgres=# create user dummy with password '';
CREATE ROLE
postgres=# create database dummy with owner dummy;
CREATE DATABASE
postgres=# \d
No relations found.
&lt;/pre&gt;
&lt;p&gt;We now have a perfectly capable database with no tables, let's jump to the
SQL schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;355&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;date_joined&lt;/span&gt; &lt;span class="k"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transfer this schema to &lt;a class="reference external" href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ psql -U dummy
psql (9.4.1)
Type &amp;quot;help&amp;quot; for help.
dummy=#     CREATE TABLE account(
dummy(#         id serial PRIMARY KEY,
dummy(#         first_name VARCHAR (50),
dummy(#         last_name VARCHAR (50),
dummy(#         username VARCHAR (50) UNIQUE NOT NULL,
dummy(#         password VARCHAR (50) NOT NULL,
dummy(#         email VARCHAR (355) UNIQUE NOT NULL,
dummy(#         date_joined TIMESTAMP NOT NULL
dummy(#     );
CREATE TABLE
dummy=# \d
             List of relations
 Schema |      Name      |   Type   | Owner
--------+----------------+----------+-------
 public | account        | table    | thoas
 public | account_id_seq | sequence | thoas
(2 rows)

dummy=#
&lt;/pre&gt;
&lt;p&gt;First insertions incoming!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dummy=# INSERT INTO account (username, first_name, last_name, password, email, date_joined) VALUES ('thoas', 'Florent', 'Messa', '8d56e93bcc8d63a171b5630282264341', 'foo&amp;#64;bar.com', '2015-07-31 15:10:10');
&lt;/pre&gt;
&lt;p&gt;At this point, we have a schema in a great database, we need to setup our
REST API.&lt;/p&gt;
&lt;p&gt;We will use:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ant0ine/go-json-rest"&gt;go-json-rest&lt;/a&gt; to handle requests&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jinzhu/gorm"&gt;gorm&lt;/a&gt; to manipulate the database as an ORM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In your shell, run this to install them&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go get -u github.com/jinzhu/gorm
$ go get github.com/ant0ine/go-json-rest/rest
&lt;/pre&gt;
&lt;p&gt;We will define a first attempt of our API to retrieve user information based
on its username.&lt;/p&gt;
&lt;p&gt;We will rewrite our API three times so you need to focus.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.go&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;github.com/ant0ine/go-json-rest/rest&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;github.com/jinzhu/gorm&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/lib/pq&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ID&lt;/span&gt;         &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="s"&gt;`gorm:&amp;quot;primary_key&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;FirstName&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;LastName&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;Username&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;Password&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;Email&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;DateJoined&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Accounts&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Db&lt;/span&gt; &lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;username = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RecordNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dsn&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user=%s dbname=%s sslmode=disable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DATABASE_USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DATABASE_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;gorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;SetMaxIdleConns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;SetMaxOpenConns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SingularTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LogMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewApi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultDevStack&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MakeRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/users/:username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Detail&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MakeHandler&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's start the server then&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ DATABASE_USER=dummy DATABASE_NAME=dummy go run main.go
&lt;/pre&gt;
&lt;p&gt;and retrieve the response.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8080/users/thoas
{
  &amp;quot;ID&amp;quot;: 1,
  &amp;quot;Username&amp;quot;: &amp;quot;thoas&amp;quot;,
  &amp;quot;FirstName&amp;quot;: &amp;quot;Florent&amp;quot;,
  &amp;quot;LastName&amp;quot;: &amp;quot;Messa&amp;quot;,
  &amp;quot;Password&amp;quot;: &amp;quot;8d56e93bcc8d63a171b5630282264341&amp;quot;,
  &amp;quot;Email&amp;quot;: &amp;quot;foo&amp;#64;bar.com&amp;quot;,
  &amp;quot;DateJoined&amp;quot;: &amp;quot;2015-07-31T15:10:10Z&amp;quot;
}
&lt;/pre&gt;
&lt;p&gt;Wait a minute? You are exposing the user's password... this not
what we are excepting... We want this specific format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thoas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Florent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;last_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Messa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Florent Messa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo@bar.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;date_joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-07-31T15:10:10Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;api_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8080/users/thoas&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Implement a separate struct named &lt;tt class="docutils literal"&gt;AccountResource&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AccountResource&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ID&lt;/span&gt;         &lt;span class="kt"&gt;uint&lt;/span&gt;      &lt;span class="s"&gt;`json:&amp;quot;id&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Username&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;username&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;FirstName&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;first_name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;LastName&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;last_name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Email&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;email&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;DateJoined&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;date_joined&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and rewrite &lt;tt class="docutils literal"&gt;Accounts.Detail&lt;/tt&gt; to use &lt;a class="reference external" href="https://github.com/ulule/deepcopier"&gt;deepcopier&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;username = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RecordNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;AccountResource&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;deepcopier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are good now, we can inspect our result&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8080/users/thoas
{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;username&amp;quot;: &amp;quot;thoas&amp;quot;,
  &amp;quot;first_name&amp;quot;: &amp;quot;Florent&amp;quot;,
  &amp;quot;last_name&amp;quot;: &amp;quot;Messa&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Florent Messa&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;foo&amp;#64;bar.com&amp;quot;,
  &amp;quot;date_joined&amp;quot;: &amp;quot;2015-07-31T15:10:10Z&amp;quot;
}
&lt;/pre&gt;
&lt;p&gt;Easy, right?&lt;/p&gt;
&lt;p&gt;We will now rewrite for the last time &lt;tt class="docutils literal"&gt;Accounts.Detail&lt;/tt&gt; to provide
some context to retrieve the base url in &lt;tt class="docutils literal"&gt;api_url&lt;/tt&gt; attribute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;username = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RecordNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;AccountResource&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;base_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BaseUrl&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;

    &lt;span class="nx"&gt;deepcopier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;WithContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to update &lt;tt class="docutils literal"&gt;AccountResource&lt;/tt&gt; to implement the &lt;tt class="docutils literal"&gt;ApiUrl&lt;/tt&gt; new method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AccountResource&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ID&lt;/span&gt;         &lt;span class="kt"&gt;uint&lt;/span&gt;      &lt;span class="s"&gt;`json:&amp;quot;id&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Username&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;username&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;FirstName&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;first_name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;LastName&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;last_name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;name&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Email&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:&amp;quot;email&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;DateJoined&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;date_joined&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;ApiUrl&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`deepcopier:&amp;quot;context&amp;quot; json:&amp;quot;api_url&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ApiUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s/users/%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;base_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have now the final result of what we excepted for the first time :)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8080/users/thoas
{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;username&amp;quot;: &amp;quot;thoas&amp;quot;,
  &amp;quot;first_name&amp;quot;: &amp;quot;Florent&amp;quot;,
  &amp;quot;last_name&amp;quot;: &amp;quot;Messa&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Florent Messa&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;foo&amp;#64;bar.com&amp;quot;,
  &amp;quot;date_joined&amp;quot;: &amp;quot;2015-07-31T15:10:10Z&amp;quot;,
  &amp;quot;api_url&amp;quot;: &amp;quot;http://localhost:8080/users/thoas&amp;quot;
}
&lt;/pre&gt;
&lt;p&gt;If you have reached to the bottom you belong to the brave!&lt;/p&gt;
&lt;p&gt;It has been a long introduction, hope your enjoy it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contributing-to-deepcopier"&gt;
&lt;h2&gt;Contributing to deepcopier&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ping us on twitter &lt;a class="reference external" href="https://twitter.com/oibafsellig"&gt;&amp;#64;oibafsellig&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/thoas"&gt;&amp;#64;thoas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fork the &lt;a class="reference external" href="https://github.com/ulule/deepcopier"&gt;project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fix &lt;a class="reference external" href="https://github.com/ulule/deepcopier/issues"&gt;bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't hesitate ;)&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Introduction to picfit, an image resizing server written in Go</title><link href="/introduction-to-picfit-an-image-resizing-server-written-in-go.html" rel="alternate"></link><published>2017-04-13T00:00:00+02:00</published><updated>2017-04-13T00:00:00+02:00</updated><author><name>Florent Messa</name></author><id>tag:None,2017-04-13:/introduction-to-picfit-an-image-resizing-server-written-in-go.html</id><summary type="html">&lt;div class="section" id="the-motivation"&gt;
&lt;h2&gt;The motivation&lt;/h2&gt;
&lt;p&gt;The idea behind &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; came from the need of exporting image processing
(resize, thumbnail, etc.) to an independent web service which will be
able to manage my files no matter the storage
engine used (s3, file system, etc.).&lt;/p&gt;
&lt;p&gt;When you are dealing with resizing on demand, you have â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-motivation"&gt;
&lt;h2&gt;The motivation&lt;/h2&gt;
&lt;p&gt;The idea behind &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; came from the need of exporting image processing
(resize, thumbnail, etc.) to an independent web service which will be
able to manage my files no matter the storage
engine used (s3, file system, etc.).&lt;/p&gt;
&lt;p&gt;When you are dealing with resizing on demand, you have to store keys of
generated images to a data storage to avoid generating the same image twice.
With a unique interface, picfit allows you to use or
implement your favorite data storage.&lt;/p&gt;
&lt;p&gt;At &lt;a class="reference external" href="http://www.ulule.com"&gt;ulule.com&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; allows us to remove
a large amount of code for avatars and project images processing and
avoid synchronous calls to retrieve generated images, which can have
an impact on your application performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-using-go-lang-over-insert-another-cool-language-here"&gt;
&lt;h2&gt;Why using Go lang over &amp;lt;insert another cool language here&amp;gt;?&lt;/h2&gt;
&lt;p&gt;Go language has been chosen because it allows to generate a binary file
and make deployments easier, have better concurrency mechanism
(I'm looking at you GIL) with a simple language.&lt;/p&gt;
&lt;p&gt;Another advantage for Go was the large number of developers
were excited about it.&lt;/p&gt;
&lt;p&gt;There are plenty of great articles on why you should use Go
and why you should avoid it â˜º&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;The best way to use &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; locally for testing it, before any
installation on a real server, is to use &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; with a virtual machine.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;First, make sure you have installed &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; and &lt;a class="reference external" href="https://www.virtualbox.org"&gt;VirtualBox&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone the &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; repository&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/thoas/picfit
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install &lt;a class="reference external" href="http://www.ansible.com/"&gt;Ansible&lt;/a&gt; to use provisioning files from the picfit repository,
depending your OS, it can be done like so:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
$ pip install ansible
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Start the virtual machine, Vagrant will run provisioning automatically,
it can be long so grab a coffee or a tea â˜º&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
$ vagrant up
&lt;/pre&gt;
&lt;p&gt;On the virtual machine, &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; runs on port &lt;strong&gt;8080&lt;/strong&gt; behind Varnish
on port &lt;strong&gt;80&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="https://github.com/thoas/picfit/blob/master/Vagrantfile#L23"&gt;Vagrantfile&lt;/a&gt;, the port &lt;strong&gt;80&lt;/strong&gt; is forwarded on the virtual machine
to the port &lt;strong&gt;8080&lt;/strong&gt; on your machine, &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; will be available using HTTP:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://127.0.0.1:8080
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To call the service you should provide the following parameters:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://localhost:3001/{method}?url={url}&amp;amp;path={path}&amp;amp;w={width}&amp;amp;h={height}&amp;amp;upscale={upscale}&amp;amp;sig={sig}&amp;amp;op={operation}&amp;amp;fmt={format}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pathâ€Šâ€”â€ŠThe filepath to load the image using your source
storage (optional, if you havenâ€™t configured a source storage)&lt;/li&gt;
&lt;li&gt;method â€” The operation to perform: &lt;strong&gt;display&lt;/strong&gt;, &lt;strong&gt;redirect&lt;/strong&gt; or &lt;strong&gt;get&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;sig - The signature key which is the representation of your query string
and your secret key (optional, if you havenâ€™t configured a secret key)&lt;/li&gt;
&lt;li&gt;url â€” The url of the image which will be retrieved by HTTP (optional, if path is provided)&lt;/li&gt;
&lt;li&gt;widthâ€Šâ€”â€ŠThe desired width of the image,
if 0 is provided the service will calculate the ratio with &lt;strong&gt;height&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;heightâ€Šâ€”â€ŠThe desired height of the image,
if 0 is provided the service will calculate the ratio with &lt;strong&gt;width&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;upscaleâ€Šâ€”â€ŠIf your image is smaller than your desired dimensions,
the service will upscale it by default to fit your dimensions,
you can disable this behavior by providing 0 (optional)&lt;/li&gt;
&lt;li&gt;formatâ€Šâ€”â€ŠThe output format to save the image, by default the format
will be the source format, for example a GIF image
source will be saved as GIF (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-examples"&gt;
&lt;h2&gt;Basic examples&lt;/h2&gt;
&lt;p&gt;Letâ€™s take as a basic experiment, a logo that everyone knows well.&lt;/p&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*V-OWuu3-GgNFkDOQgrmrzg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://www.google.fr/images/srpr/logo11w.png (538x190)
&lt;/pre&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;200 width&lt;/strong&gt; and calculate the &lt;strong&gt;height&lt;/strong&gt; ratio&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*9RKGTfQCXyWB6RVyjc1zlg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display?url=http://www.google.fr/images/srpr/logo11w.png&amp;amp;w=200&amp;amp;h=0&amp;amp;op=resize
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;200 width&lt;/strong&gt; and &lt;strong&gt;100 height&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*ufchoQbRFdg4tczAS6lGRA.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display?url=http://www.google.fr/images/srpr/logo11w.png&amp;amp;w=200&amp;amp;h=100&amp;amp;op=resize
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Thumbnail the image to &lt;strong&gt;300 width&lt;/strong&gt; and &lt;strong&gt;50 height&lt;/strong&gt;, it will perform a crop operation from the center of it&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*pIvIQj0nd90qCjKnd87gVg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display?url=http://www.google.fr/images/srpr/logo11w.png&amp;amp;w=300&amp;amp;h=50&amp;amp;op=thumbnail
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;600 width&lt;/strong&gt; and calculate the ratio to find the perfect height, the image will be degraded&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*B_smig-gRy4HZ-fmJETLkg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display?url=http://www.google.fr/images/srpr/logo11w.png&amp;amp;w=600&amp;amp;h=0&amp;amp;op=resize
&lt;/pre&gt;
&lt;p&gt;If you want &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt; to not upscale the image to the specific size
(in case when your size is higher than the original image size),
you can disable the upscale behavior.&lt;/p&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*phQamw5IO1eV7345KIw1Sg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display?url=http://www.google.fr/images/srpr/logo11w.png&amp;amp;w=600&amp;amp;h=0&amp;amp;op=resize&amp;amp;upscale=0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-a-source-storage"&gt;
&lt;h2&gt;Configuring a source storage&lt;/h2&gt;
&lt;p&gt;Now we know picfit can retrieve an image from any URL using HTTP, we will
configure an Amazon S3 storage to retrieve our uploaded images and
store generated images to a different Amazon S3 storage.&lt;/p&gt;
&lt;p&gt;We will call our source Amazon S3 bucket &lt;strong&gt;source-bucket&lt;/strong&gt; located a datacenter
in europe and our destination Amazon S3 bucket &lt;strong&gt;dest-bucket&lt;/strong&gt;
located to another datacenter in USA.&lt;/p&gt;
&lt;p&gt;Provisioning files from the picfit repository comes with an installation
of Redis as a key/value store on the 6380 port.&lt;/p&gt;
&lt;p&gt;The key/value store will be needed when you want to avoid to generate
a resized image twice. For each request picfit will generate an unique key
to identify the operation made and store the result on the key/value store.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Edit the &lt;strong&gt;config.json&lt;/strong&gt; of picfit located to &lt;strong&gt;/etc/picfit&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;kvstore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6380&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;prefix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;picfit:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;storage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;access_key_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ACCESS_KEY_ID]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;secret_access_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[SECRET_ACCESS_KEY]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;bucket_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source-bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;acl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public-read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eu-west-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;access_key_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ACCESS_KEY_ID]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;secret_access_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[SECRET_ACCESS_KEY]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;bucket_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dest-bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;acl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public-read-write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;us-west-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generated images will be stored on the destination storage in the &lt;strong&gt;cache&lt;/strong&gt; location.
Our source storage (which is an Amazon S3 bucket) contains our logo
stored at the location &lt;strong&gt;images/srpr/logo11w.png&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By default, if you donâ€™t specify a destination storage, &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt;
will store generated images to the source storage.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Restart the picfit service&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
$ sudo service picfit restart
&lt;/pre&gt;
&lt;p&gt;picfit implements the &lt;a class="reference external" href="https://github.com/facebookgo/grace"&gt;facebook/grace&lt;/a&gt; which
allows you to restart it gracefully&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo kill -USR2 $(cat /var/run/picfit.pid)
&lt;/pre&gt;
&lt;p&gt;We are ready! Letâ€™s convert our previous examples using the source storage.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;200 width&lt;/strong&gt; and calculate the &lt;strong&gt;height&lt;/strong&gt; ratio&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*9RKGTfQCXyWB6RVyjc1zlg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display/resize/200x/images/srpr/logo11w.png
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;200 width&lt;/strong&gt; and &lt;strong&gt;100 height&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*ufchoQbRFdg4tczAS6lGRA.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display/resize/200x100/images/srpr/logo11w.png
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Thumbnail the image to &lt;strong&gt;300 width&lt;/strong&gt; and &lt;strong&gt;50 height&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*pIvIQj0nd90qCjKnd87gVg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display/thumbnail/300x50/images/srpr/logo11w.png
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Resize the image to &lt;strong&gt;600 width&lt;/strong&gt; and disable upscale&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*phQamw5IO1eV7345KIw1Sg.png" /&gt;
&lt;pre class="literal-block"&gt;
http://localhost:8080/display/resize/600x/images/srpr/logo11w.png?upscale=0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It has been a long introduction, if you have reach to the bottom
you belong to the brave â˜º.&lt;/p&gt;
&lt;p&gt;There are multiple others features (&lt;a class="reference external" href="https://github.com/thoas/picfit#security"&gt;Security&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/thoas/picfit#error-reporting"&gt;Sentry integration&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/thoas/picfit#methods"&gt;others methods&lt;/a&gt;, etc.)
which are not described in this blog post, if you are curious enough
go check the &lt;a class="reference external" href="https://github.com/thoas/picfit/blob/master/README.rst"&gt;README&lt;/a&gt; of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contributing-to-picfit"&gt;
&lt;h2&gt;Contributing to picfit&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ping me on twitter &lt;a class="reference external" href="http://twitter.com/thoas"&gt;&amp;#64;thoas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fork the &lt;a class="reference external" href="https://github.com/thoas/picfit"&gt;project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fix &lt;a class="reference external" href="https://github.com/thoas/picfit/issues"&gt;bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add more unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Donâ€™t hesitate â˜º!&lt;/p&gt;
&lt;/div&gt;
</content></entry></feed>